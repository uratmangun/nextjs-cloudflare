name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Build Next.js application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Build for Cloudflare Pages
        run: pnpm run pages:build
        env:
          NODE_ENV: production

      - name: Check and delete existing matching projects
        id: cleanup-projects
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get repository name for pattern matching
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPO_PATTERN="${REPO_NAME}-"
          
          echo "Checking for existing projects matching pattern: ${REPO_PATTERN}*"
          
          # List all Cloudflare Pages projects
          PROJECTS=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract project names that match the pattern
          MATCHING_PROJECTS=$(echo "$PROJECTS" | jq -r ".result[] | select(.name | startswith(\"${REPO_PATTERN}\")) | .name" || true)
          
          if [ -n "$MATCHING_PROJECTS" ]; then
            echo "Found matching projects to delete:"
            echo "$MATCHING_PROJECTS"
            
            # Delete each matching project
            while IFS= read -r PROJECT; do
              if [ -n "$PROJECT" ]; then
                echo "Deleting project: $PROJECT"
                DELETE_RESPONSE=$(curl -s -X DELETE \
                  "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${PROJECT}" \
                  -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                  -H "Content-Type: application/json")
                
                SUCCESS=$(echo "$DELETE_RESPONSE" | jq -r '.success')
                if [ "$SUCCESS" = "true" ]; then
                  echo "Successfully deleted project: $PROJECT"
                else
                  echo "Warning: Failed to delete project: $PROJECT"
                  echo "Response: $DELETE_RESPONSE"
                fi
              fi
            done <<< "$MATCHING_PROJECTS"
          else
            echo "No existing projects found matching pattern: ${REPO_PATTERN}*"
          fi

      - name: Generate project name and create Cloudflare Pages project
        id: generate-project-name
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get repository name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Generate random alphanumeric string
          RANDOM_STRING=$(openssl rand -hex 8 | tr -d '\n')
          
          # Combine repository name with random string
          PROJECT_NAME="${REPO_NAME}-${RANDOM_STRING}"
          
          # Ensure minimum length of 26 characters
          while [ ${#PROJECT_NAME} -lt 26 ]; do
            EXTRA_CHARS=$(openssl rand -hex 2 | tr -d '\n')
            PROJECT_NAME="${PROJECT_NAME}${EXTRA_CHARS}"
          done
          
          # Ensure project name is valid (lowercase, alphanumeric, hyphens only)
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          echo "Generated project name: $PROJECT_NAME"
          
          # Create Cloudflare Pages project
          echo "Creating Cloudflare Pages project: $PROJECT_NAME"
          CREATE_RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"${PROJECT_NAME}\",
              \"production_branch\": \"main\",
              \"build_config\": {
                \"build_command\": \"pnpm run pages:build\",
                \"destination_dir\": \".vercel/output/static\",
                \"root_dir\": \"/\"
              }
            }")
          
          # Check if project creation was successful
          SUCCESS=$(echo "$CREATE_RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "Successfully created Cloudflare Pages project: $PROJECT_NAME"
            PROJECT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.result.id')
            echo "Project ID: $PROJECT_ID"
          else
            echo "Failed to create Cloudflare Pages project"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi
          
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to Cloudflare Pages (Production)
        id: cloudflare-deploy-prod
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ steps.generate-project-name.outputs.project_name }}
          directory: .vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          wranglerVersion: '3'

      - name: Update repository homepage URL
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const projectName = '${{ steps.generate-project-name.outputs.project_name }}';
            const homepageUrl = `https://${projectName}.pages.dev`;
            
            console.log(`Updating repository homepage to: ${homepageUrl}`);
            
            try {
              await github.rest.repos.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                homepage: homepageUrl
              });
              console.log('Successfully updated repository homepage URL');
            } catch (error) {
              console.error('Failed to update repository homepage URL:', error);
              // Don't fail the workflow if homepage update fails
            }

      - name: Deploy to Cloudflare Pages (Preview)
        id: cloudflare-deploy-preview
        if: github.event_name == 'pull_request'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ steps.generate-project-name.outputs.project_name }}
          directory: .vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
          wranglerVersion: '3'

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = '${{ steps.cloudflare-deploy-preview.outputs.url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Preview deployment ready!\n\nðŸ”— ${deployment}`
            })
